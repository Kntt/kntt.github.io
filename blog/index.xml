<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Kntt&#39;s Blog</title>
    <link>http://liuys.me/blog/</link>
    <description>Recent content in Blogs on Kntt&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 17 Feb 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://liuys.me/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一个Bug的修复，促使我写了一个package</title>
      <link>http://liuys.me/blog/vue-webview-bridge/</link>
      <pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://liuys.me/blog/vue-webview-bridge/</guid>
      <description>项目地址：vue-webview-js-bridge 主要功能：基于WebViewJavascriptBridge开发的 webview-js-bridge 的 vue 插件，后面废话较多，可以直接看项目。如果刚好闲来无事，权当打发时间
故事背景 本人前端，在一个移动办公 APP 团队。由于业务简单，并没有使用 RN，WEEX 等技术。简单的使用 native 做了一个壳，主要逻辑都是前端控制。主技术栈是 Vue.
bug 出现 在一段时间内，团队接到多人反馈，APP 每天都需要重新登陆。作为团队的前端我很诧异，因为登陆大 token 在前端保存，有效期是三天，怎么可能会每天都要登陆呢？
排查原因 token 有效期三天这个肯定没有问题 团队成员手机都没出过问题，证明逻辑没问题 收集问题反馈人手机信息，发现所有反馈人员的手机有一个共同点，储存空间都不足（ios），问题也主要集中在苹果手机 定位问题原因，可能是因为手机储存空间不足，把储存的 token 清理了。按着这个思路开始排查&amp;hellip; 难道是手机内存空间不足，把储存的 token 当作没用的信息清理了？（token 存在 localstorage 里面）。 通过 google 发现，ios 确实存在这种情况，当手机储存空间不足时候会把系统认为无用的信息清理掉，给主要程序提供运行环境。
问题复现 找到一台储存空间不足的苹果测试机，登陆到 APP 后，找一部非常大的电影下载。这时候系统就会清理空间来满足下载电影的需求。结果发现 APP 需要重新登陆了。问题复现，原因确认。
解决问题 一个小 APP，仅仅为了储存 token 而引入 sqlite 之类的本地数据库，很有些大材小用。但是 localstorage，cookie 等能储存的地方又都在系统清理的范围内。最后决定把 token 储存在 native 端。
解决方案 native 开发类似 localstorage 的功能 token 存入 native 端 前端启动时查询 native 端是否存在 token，存在就同步到 localstorage，不存在，跳转登陆页面。 其他逻辑不变 方案确定，一个字，撸起袖子一顿猛干。。。</description>
    </item>
    
    <item>
      <title>[Flutter-前端视角]学习总结</title>
      <link>http://liuys.me/blog/flutter-dart-4/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://liuys.me/blog/flutter-dart-4/</guid>
      <description>[Flutter-前端视角]dart 语言学习笔记（1）
[Flutter-前端视角]dart 语言学习笔记（2）
[Flutter-前端视角]dart 语言学习笔记（3）
对应的前端 HTML 标签 HTML 里面的标签在 flutter 里面叫做Widget,但是Widget并不是 html 里面的标签，因为 css 里面的一些属性也处理成相应的Widget了。
也就是说Widget包含标签和 CSS 属性
h1 ～ h6,p,span 文字相关标签 // Text类，可以看作是块级的文字显示 new Text( &amp;#34;Lorem ipsum&amp;#34;, style: new TextStyle( fontSize: 24.0 fontWeight: FontWeight.w900, fontFamily: &amp;#34;Georgia&amp;#34;, ), ) // 行内文字使用TextSpan类 new TextSpan( style: bold24Roboto, children: &amp;lt;TextSpan&amp;gt;[ new TextSpan(text: &amp;#34;Lorem &amp;#34;), new TextSpan( text: &amp;#34;ipsum&amp;#34;, style: new TextStyle( fontWeight: FontWeight.w300, fontStyle: FontStyle.italic, fontSize: 48.0, ), ), ], ) 这两个类都只能处理文字样式，fontsize， fontweight 等。间距等属性要借助其他类去处理</description>
    </item>
    
    <item>
      <title>[Flutter-前端视角]dart语言学习笔记（3）</title>
      <link>http://liuys.me/blog/flutter-dart-3/</link>
      <pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://liuys.me/blog/flutter-dart-3/</guid>
      <description>类和对象 Dart 是一门使用类和单继承的面向对象语言
所有的对象都是类的实例，并且所有的类都是Object的子类
定义 类的定义用class关键字
如果未显式定义构造函数，会默认一个空的构造函数
使用new关键字和构造函数来创建对象
2.构造函数
如果只是简单的参数传递，可以在构造函数的参数前加this关键字定义或者参数后加 : 再赋值
没有函数体的函数可以直接写;来结束函数声明
class Point { num x; num y; num z; // 第一个值传递给this.x，第二个值传递给this.y, 类似js中的解构赋值 Point(this.x, this.y, z) { this.z = z; } // 命名构造函数，格式为Class.name(var param) Point.fromList(var list): x = list[0], y = list[1], z=list[2]; //当然，上面句你也可以简写为：this相当于自身的构造函数 //Point.fromList(var list):this(list[0], list[1], list[2]); String toString() =&amp;gt; &amp;#39;x:$x y:$y z:$z&amp;#39;; } void main() { var p1 = new Point(1, 2, 3); var p2 = new Point.</description>
    </item>
    
    <item>
      <title>[Flutter-前端视角]dart语言学习笔记（2）</title>
      <link>http://liuys.me/blog/flutter-dart-2/</link>
      <pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://liuys.me/blog/flutter-dart-2/</guid>
      <description>标记特殊需要记忆的点 取整~/操作符之前可能很少看到，代码如下 int a = 3； int b = 2； print(a~/b);//输出1 2.级联操作符，当你要对一个单一的对象进行一系列的操作的时候， 可以使用级联操作符 ..(相当于 js 的链式调用，隐式的返回原对象)
class Person { String name; String country; void setCountry(String country){ this.country = country; } String toString() =&amp;gt; &amp;#39;Name:$name\nCountry:$country&amp;#39;; } void main() { Person p = new Person(); p ..name = &amp;#39;Wang&amp;#39; ..setCountry(&amp;#39;China&amp;#39;); print(p); } If语句的判断条件为==bool==值，用法和大多语言一样（只接受布尔值， 其他类型的值都译为false） if(i&amp;lt;0){ print(&amp;#39;i &amp;lt; 0&amp;#39;); }else if(i ==0){ print(&amp;#39;i = 0&amp;#39;); } else { print(&amp;#39;i &amp;gt; 0&amp;#39;); } 循环 for forEach for-in for(int i = 0; i&amp;lt;3; i++) { print(i); } 如果迭代的对象是容器，那么可以使用forEach或者for-in</description>
    </item>
    
    <item>
      <title>[Flutter-前端视角]dart语言学习笔记（1）</title>
      <link>http://liuys.me/blog/flutter-dart-1/</link>
      <pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://liuys.me/blog/flutter-dart-1/</guid>
      <description>一. 基础数据类型 - 一切皆对象 Numbers Strings Booleans Lists Maps Runes (用于在字符串中表示 Unicode 字符) &amp;ndash; 后面继续看 Symbols 声明变量 关键字var const final a. var // 通过var声明变量，这一点和js没什么区别 b. const , final // 这两个关键字都是声明常量的（重点看下面的区别） final time = new DateTime.now(); //Ok const time = new DateTime.now(); //Error，new DateTime.now()不是const常量 // const 声明的常量不能是变量， 也就是说不能是官方文档所说的运行时常量 // final 声明的常量可以是运行时常量也可以是编译时常量（final包含const） // 例如：声明 PI 是个运行时常量 就用const PI = 3.14159 // var、final等在左边定义变量的时候，并不关心右边是不是常量 // 但是如果右边用了const，那么不管左边如何，右边都必须是常量 const list = const[1,2,3];//Ok const list = [1,2,3];//Error final list = [1,2,3];//Ok final list = const[1,2,3];//Ok final list = const[new DateTime.</description>
    </item>
    
    <item>
      <title>移动端网页布局方法总结</title>
      <link>http://liuys.me/blog/mobile-resove/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://liuys.me/blog/mobile-resove/</guid>
      <description>1. 移动端，a、input 标签被点击时查实的半透明灰色背景 描述：发生在 wp 操作系统中
&amp;lt;meta name=&amp;#34;msapplication-tap-highlight&amp;#34; content=&amp;#34;no&amp;#34;&amp;gt; 2.关闭 IOS 键盘首字母大写 描述：
&amp;lt;input type=&amp;#34;text&amp;#34; autocapitalize=&amp;#34;off&amp;#34; /&amp;gt; 3.禁止文本缩放 描述：
html { -webkit-text-size-adjust: 100%; } 4.清除输入框内阴影 描述：IOS 中，输入框默认有内部阴影，但是无法用 box-shadow 来清除
input, textarea { border: 0; -webkit-appearance: none; } 5.忽略页面的数字为电话，忽略 email 描述：
&amp;lt;meta name=&amp;#34;format-detection&amp;#34; content=&amp;#34;telephone=no, email=no&amp;#34;/&amp;gt; 6.快速回弹滚动 描述：可以选择相应插件，iscroll，idangero swiper，文档一大堆；
.xxx { overflow: auto; -webkit-overflow-scrolling: touch; } 7.禁止选中内容 描述：如果你不想用户可以选中页面中的内容，那么你可以在 css 中禁掉;
.user-select-none { -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; } // 兼容ie6-9 &amp;lt;any onselectstart=&amp;#34;return false;&amp;#34; unselectable=&amp;#34;on&amp;#34;&amp;gt;&amp;lt;/any&amp;gt; 8.</description>
    </item>
    
  </channel>
</rss>
